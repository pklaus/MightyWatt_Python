#!/usr/bin/env python
# -*- coding: utf-8 -*-

from mw import MightyWatt
import cmd
from blessings import Terminal

class MightyWattShell(cmd.Cmd):
    intro = 'Welcome to the MightyWatt shell.   Type help or ? to list commands.\n'
    prompt = '(MightyWatt) > '
    undoc_header = None
    UNITS_fmt = {
        'voltage':     "{:.3f} V",
        'current':     "{:.3f} A",
        'power':       "{:.2f} W",
        'resistance':  "{:.1f} Ω",
        'temperature': "{:2d} ℃ ",
        'remote':      "remote: {}"
    }
    UPDATE_fmt = "{t.red}{voltage}{t.normal} | " \
                 "{t.green}{current}{t.normal} | " \
                 "{t.blue}{power}{t.normal} | " \
                 "{t.cyan}{resistance}{t.normal} | " \
                 "{t.magenta}{temperature}{t.normal} | " \
                 "{remote}"
    mw = None
    term = None

    def onecmd(self, line):
        try:
            return cmd.Cmd.onecmd(self, line)
        except Exception as e:
            print("An error occured:")
            print(str(e))

    def do_cc(self, arg):
        'Set constant current mode'
        current = float(arg)
        self.mw.set_cc(current)

    def do_cv(self, arg):
        'Set constant voltage mode'
        voltage = float(arg)
        self.mw.set_cv(voltage)

    def do_cp(self, arg):
        'Set constant power mode'
        power = float(arg)
        self.mw.set_cp(power)

    def do_cr(self, arg):
        'Set constant resistance mode'
        resistance = float(arg)
        self.mw.set_cr(resistance)

    def do_stop(self, arg):
        'Stop the MightyWatt (set CC mode with 0.0 A, local sensing)'
        self.mw.stop()

    def do_local(self, arg):
        'Enable local voltage sensing'
        self.mw.set_remote(False)

    def do_remote(self, arg):
        'Enable remote voltage sensing'
        self.mw.set_remote(True)

    def do_status(self, arg):
        'Print status of the MightyWatt'
        status = self.mw.status
        with self.term.location(0, self.term.height-1):
            status = {s: self.UNITS_fmt[s].format(status[s]) for s in self.UNITS_fmt}
            print(self.UPDATE_fmt.format(t=self.term, **status))

    def do_quit(self, arg):
        'Quit this session'
        print('Quitting...')
        self.mw.close()
        return True

    do_EOF = do_quit

    def print_topics(self, header, cmds, cmdlen, maxcol):
        if not header: return
        if cmds:
            self.stdout.write("%s\n"%str(header))
            if self.ruler:
                self.stdout.write("%s\n"%str(self.ruler * len(header)))
            cmds.remove('quit')
            cmds.append('quit')
            for cmd in cmds:
                if len(cmd) == 1: continue
                if cmd == 'EOF': continue
                if cmd == 'help': continue
                print("{:7s} - {}".format(cmd, getattr(self, 'do_' + cmd).__doc__))
            self.stdout.write("\n")

def main():
    import argparse
    parser = argparse.ArgumentParser(description='MightyWatt shell')
    parser.add_argument('serial_port', help='The serial port to connect to')
    args = parser.parse_args()
    mw = MightyWatt(args.serial_port)
    mws = MightyWattShell()
    mws.mw = mw
    mws.term = Terminal()
    try:
        mws.cmdloop()
    except KeyboardInterrupt:
        mws.do_quit('')

if __name__ == "__main__":
    main()
